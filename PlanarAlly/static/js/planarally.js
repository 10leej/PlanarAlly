!function(t){var e={};function i(a){if(e[a])return e[a].exports;var n=e[a]={i:a,l:!1,exports:{}};return t[a].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,a){i.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:a})},i.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);const a="localhost"===document.domain?"http://":"https://",n=io.connect(a+document.domain+":"+location.port+"/planarally");let o=!1;n.on("connect",function(){console.log("Connected")}),n.on("disconnect",function(){console.log("Disconnected")}),n.on("redirect",function(t){console.log("redirecting"),window.location.href=t}),n.on("set username",function(t){Q.username=t,Q.IS_DM=t===window.location.pathname.split("/")[2],0===$("#toolselect").find("ul").html().length&&Q.setupTools()}),n.on("set clientOptions",function(t){Q.setClientOptions(t)}),n.on("set locationOptions",function(t){Q.layerManager.setOptions(t)}),n.on("asset list",function(t){const e=$("#menu-tokens");e.empty();let i="";const a=function(t,e){e=e||"",new Map(Object.entries(t.folders)).forEach(function(t,n){i+="<button class='accordion'>"+n+"</button><div class='accordion-panel'><div class='accordion-subpanel'>",a(t,e+n+"/"),i+="</div></div>"}),t.files.sort(alphSort),t.files.forEach(function(t){i+="<div class='draggable token'><img src='/static/img/assets/"+e+t+"' width='35'>"+t+"<i class='fas fa-cog'></i></div>"})};a(t),e.html(i),$(".draggable").draggable({helper:"clone",appendTo:"#board"}),$(".accordion").each(function(t){$(this).on("click",function(){$(this).toggleClass("accordion-active"),$(this).next().toggle()})})}),n.on("board init",function(t){Q.layerManager=new LayerManager;const e=$("#layers");e.empty();const i=$("#layerselect");i.find("ul").empty();let a=0;const s=$("#locations-menu").find("div");s.children().off(),s.empty();for(let e=0;e<t.locations.length;e++){const i=$("<div>"+t.locations[e]+"</div>");s.append(i)}const r=$('<div><i class="fas fa-plus"></i></div>');s.append(r),s.children().on("click",function(t){if(""===t.target.textContent){const t=prompt("New location name");null!==t&&n.emit("new location",t)}else n.emit("change location",t.target.textContent)});for(let n=0;n<t.board.layers.length;n++){const o=t.board.layers[n];if(e.append("<canvas id='"+o.name+"-layer' style='z-index: "+n+"'></canvas>"),o.selectable){let t="";0===a&&(t=" class='layer-selected'"),i.find("ul").append("<li id='select-"+o.name+"'"+t+"><a href='#'>"+o.name+"</a></li>"),a+=1}const s=$("#"+o.name+"-layer")[0];let r;s.width=window.innerWidth,s.height=window.innerHeight,(r=o.grid?new GridLayerState(s,o.name):"fow"===o.name?new FOWLayerState(s,o.name):new LayerState(s,o.name)).selectable=o.selectable,r.player_editable=o.player_editable,Q.layerManager.addLayer(r),o.grid?(Q.layerManager.setGridSize(o.size),Q.layerManager.drawGrid(),$("#grid-layer").droppable({accept:".draggable",drop:function(t,e){const i=Q.layerManager.getLayer(),a=$(i.canvas).offset(),n={x:parseInt(e.offset.left-a.left),y:parseInt(e.offset.top-a.top)};if(settings_menu.is(":visible")&&n.x<settings_menu.width())return;if(locations_menu.is(":visible")&&n.y<locations_menu.width())return;const o=l2w(n),s=e.draggable[0].children[0],r=new Asset(s,o.x,o.y,s.width,s.height);if(r.src=s.src,Q.layerManager.useGrid&&!t.altKey){const t=Q.layerManager.gridSize;r.x=Math.round(r.x/t)*t,r.y=Math.round(r.y/t)*t,r.w=Math.max(Math.round(r.w/t)*t,t),r.h=Math.max(Math.round(r.h/t)*t,t)}i.addShape(r,!0)}})):r.setShapes(o.shapes)}Q.layerManager.setLayer(Q.layerManager.getLayer().name),o=!0,a>1?i.find("li").on("click",function(){const t=this.id.split("-")[1],e=i.find("#select-"+Q.layerManager.selectedLayer);t!==Q.layerManager.selectedLayer&&($(this).addClass("layer-selected"),e.removeClass("layer-selected"),Q.layerManager.setLayer(t))}):i.hide()}),n.on("set gridsize",function(t){Q.layerManager.setGridSize(t)}),n.on("add shape",function(t){const e=Q.layerManager.getLayer(t.layer);e.addShape(createShapeFromDict(t),!1),e.invalidate()}),n.on("remove shape",function(t){const e=Q.layerManager.getLayer(t.layer);e.removeShape(Q.layerManager.UUIDMap.get(t.uuid),!1),e.invalidate()}),n.on("moveShapeOrder",function(t){Q.layerManager.getLayer(t.shape.layer).moveShapeOrder(Q.layerManager.UUIDMap.get(t.shape.uuid),t.index,!1)}),n.on("shapeMove",function(t){(t=Object.assign(Q.layerManager.UUIDMap.get(t.uuid),createShapeFromDict(t,!0))).checkLightSources(),Q.layerManager.getLayer(t.layer).onShapeMove(t)}),n.on("updateShape",function(t){const e=Object.assign(Q.layerManager.UUIDMap.get(t.shape.uuid),createShapeFromDict(t.shape,!0));e.checkLightSources(),e.setMovementBlock(e.movementObstruction),t.redraw&&Q.layerManager.getLayer(t.shape.layer).invalidate()}),n.on("updateInitiative",function(t){void 0!==t.initiative&&(t.owners.includes(Q.username)||Q.IS_DM||t.visible)?Q.initiativeTracker.addInitiative(t,!1):Q.initiativeTracker.removeInitiative(t.uuid,!1,!0)}),n.on("setInitiative",function(t){Q.initiativeTracker.data=t,Q.initiativeTracker.redraw(),t.length>0&&initiativeDialog.dialog("open")}),n.on("clear temporaries",function(t){t.forEach(function(t){Q.layerManager.getLayer(t.layer).removeShape(t,!1)})});var s=n;function r(){this.layer=null,this.name="Unknown shape",this.trackers=[],this.auras=[],this.owners=[],this.visionObstruction=!1,this.movementObstruction=!1}function l(t,e,i,a){this.type="boundrect",this.x=t,this.y=e,this.w=i,this.h=a}function c(t,e,i,a,n,o,s){r.call(this),this.type="rect",this.x=t||0,this.y=e||0,this.w=i||1,this.h=a||1,this.fill=n||"#000",this.border=o||"rgba(0, 0, 0, 0)",this.uuid=s||B()}function u(t,e,i,a,n,o){r.call(this),this.type="circle",this.x=t||0,this.y=e||0,this.r=i||1,this.fill=a||"#000",this.border=n||"rgba(0, 0, 0, 0)",this.uuid=o||B()}function h(t,e,i,a,n){r.call(this),this.type="line",this.x1=t,this.y1=e,this.x2=i,this.y2=a,this.uuid=n||B()}function d(t,e,i,a,n,o){r.call(this),this.type="text",this.x=t,this.y=e,this.text=i,this.font=a,this.angle=n||0,this.uuid=o||B()}function p(t,e,i,a,n,o){r.call(this),this.type="asset",this.uuid=o||B(),this.img=t,this.x=e,this.y=i,this.w=a,this.h=n}function y(t,e){this.canvas=t,this.name=e,this.width=t.width,this.height=t.height,this.ctx=t.getContext("2d"),document.defaultView&&document.defaultView.getComputedStyle&&(this.stylePaddingLeft=parseInt(document.defaultView.getComputedStyle(t,null).paddingLeft,10)||0,this.stylePaddingTop=parseInt(document.defaultView.getComputedStyle(t,null).paddingTop,10)||0,this.styleBorderLeft=parseInt(document.defaultView.getComputedStyle(t,null).borderLeftWidth,10)||0,this.styleBorderTop=parseInt(document.defaultView.getComputedStyle(t,null).borderTopWidth,10)||0);const i=document.body.parentNode;this.htmlTop=i.offsetTop,this.htmlLeft=i.offsetLeft;this.valid=!1,this.shapes=new X,this.dragging=!1,this.resizing=!1,this.panning=!1,this.selecting=!1,this.resizedir="",this.selectionHelper=null,this.selectionStartPoint=null,this.selection=[],this.dragoffx=0,this.dragoffy=0,this.selectionColor="#CC0000",this.selectionWidth=2}function g(t,e){y.call(this,t,e)}function f(t,e){y.call(this,t,e)}function v(){this.layers=[],this.width=window.innerWidth,this.height=window.innerHeight,this.selectedLayer=null,this.UUIDMap=new Map,this.gridSize=50,this.unitSize=5,this.useGrid=!0,this.fullFOW=!1,this.fowOpacity=.3,this.zoomFactor=1,this.panX=0,this.panY=0,this.interval=30;const t=this;setInterval(function(){for(let e=t.layers.length-1;e>=0;e--)t.layers[e].draw()},this.interval)}function m(){this.startPoint=null,this.detailDiv=null,this.fillColor=$("<input type='text' />"),this.borderColor=$("<input type='text' />"),this.detailDiv=$("<div>").append($("<div>Fill</div>")).append(this.fillColor).append($("<div>Border</div>")).append(this.borderColor).append($("</div>")),this.fillColor.spectrum({showInput:!0,allowEmpty:!0,showAlpha:!0,color:"red"}),this.borderColor.spectrum({showInput:!0,allowEmpty:!0,showAlpha:!0})}function x(){this.startPoint=null}function w(){this.startPoint=null,this.detailDiv=$("<div>").append($("<div>Reveal</div><label class='switch'><input type='checkbox' id='fow-reveal'><span class='slider round'></span></label>")).append($("</div>"))}function M(){this.startPoint=null,this.xCount=$("<input type='text' value='3'>"),this.yCount=$("<input type='text' value='3'>"),this.detailDiv=$("<div>").append($("<div>#X</div>")).append(this.xCount).append($("<div>#Y</div>")).append(this.yCount).append($("</div>"))}function b(){this.layerManager=new v,this.selectedTool=0,this.rulerTool=new x,this.drawTool=new m,this.fowTool=new w,this.mapTool=new M,this.lightsources=[],this.lightblockers=[],this.movementblockers=[],this.initiativeTracker=new Y}jQuery.event.special.touchstart={setup:function(t,e,i){e.includes("noPreventDefault")?this.addEventListener("touchstart",i,{passive:!1}):this.addEventListener("touchstart",i,{passive:!0})}},r.prototype.getBoundingBox=function(){},r.prototype.checkLightSources=function(){const t=this,e=S.lightblockers.indexOf(this.uuid);this.visionObstruction&&-1===e?S.lightblockers.push(this.uuid):!this.visionObstruction&&e>=0&&S.lightblockers.splice(e,1),this.auras.forEach(function(e){const i=S.lightsources,a=i.findIndex(t=>t.aura===e.uuid);e.lightSource&&-1===a?i.push({shape:t.uuid,aura:e.uuid}):!e.lightSource&&a>=0&&i.splice(a,1)});for(let e=S.lightsources.length-1;e>=0;e--){const i=S.lightsources[e];i.shape===t.uuid&&(t.auras.some(t=>t.uuid===i.aura&&t.lightSource)||S.lightsources.splice(e,1))}},r.prototype.setMovementBlock=function(t){this.movementObstruction=t||!1;const e=S.movementblockers.indexOf(this.uuid);this.movementObstruction&&-1===e?S.movementblockers.push(this.uuid):!this.movementObstruction&&e>=0&&S.movementblockers.splice(e,1)},r.prototype.ownedBy=function(t){return void 0===t&&(t=S.username),S.IS_DM||this.owners.includes(t)},r.prototype.onMouseUp=function(){},r.prototype.onSelection=function(){this.trackers.length&&""===this.trackers[this.trackers.length-1].name&&""===this.trackers[this.trackers.length-1].value||this.trackers.push({uuid:B(),name:"",value:"",maxvalue:"",visible:!1}),this.auras.length&&""===this.auras[this.auras.length-1].name&&""===this.auras[this.auras.length-1].value||this.auras.push({uuid:B(),name:"",value:"",dim:"",lightSource:!1,colour:"rgba(0,0,0,0)",visible:!1}),$("#selection-name").text(this.name);const t=$("#selection-trackers");t.empty(),this.trackers.forEach(function(e){const i=e.maxvalue?`${e.value}/${e.maxvalue}`:e.value;t.append($(`<div id="selection-tracker-${e.uuid}-name" data-uuid="${e.uuid}">${e.name}</div>`)),t.append($(`<div id="selection-tracker-${e.uuid}-value" data-uuid="${e.uuid}" class="selection-tracker-value">${i}</div>`))});const e=$("#selection-auras");e.empty(),this.auras.forEach(function(t){const i=t.dim?`${t.value}/${t.dim}`:t.value;e.append($(`<div id="selection-aura-${t.uuid}-name" data-uuid="${t.uuid}">${t.name}</div>`)),e.append($(`<div id="selection-aura-${t.uuid}-value" data-uuid="${t.uuid}" class="selection-aura-value">${i}</div>`))}),$("#selection-menu").show();const i=this,a=$("#selection-edit-button");this.ownedBy()?a.show():a.hide(),a.on("click",function(){$("#shapeselectiondialog-uuid").val(i.uuid);const t=$("#shapeselectiondialog-name");t.val(i.name),t.on("change",function(){const t=S.layerManager.UUIDMap.get($("#shapeselectiondialog-uuid").val());t.name=$(this).val(),$("#selection-name").text($(this).val()),s.emit("updateShape",{shape:t.asDict(),redraw:!1})});const e=$("#shapeselectiondialog-lightblocker");e.prop("checked",i.visionObstruction),e.on("click",function(){const t=S.layerManager.UUIDMap.get($("#shapeselectiondialog-uuid").val());t.visionObstruction=e.prop("checked"),t.checkLightSources()});const a=$("#shapeselectiondialog-moveblocker");a.prop("checked",i.movementObstruction),a.on("click",function(){S.layerManager.UUIDMap.get($("#shapeselectiondialog-uuid").val()).setMovementBlock(a.prop("checked"))});const n=$("#shapeselectiondialog-owners"),o=$("#shapeselectiondialog-trackers"),r=$("#shapeselectiondialog-auras");function l(t){const e=$(`<input type="text" placeholder="name" data-name="${t}" value="${t}" style="grid-column-start: name">`),a=$('<div style="grid-column-start: remove"><i class="fas fa-trash-alt"></i></div>');o.before(e.add(a)),e.on("change",function(){const t=i.owners.findIndex(t=>t===$(this).data("name"));t>=0?i.owners.splice(t,1,$(this).val()):i.owners.push($(this).val()),s.emit("updateShape",{shape:i.asDict(),redraw:!1}),i.owners.length&&""===i.owners[i.owners.length-1].name&&""===i.owners[i.owners.length-1].value||l("")}),a.on("click",function(){const t=i.owners.find(t=>t.uuid===$(this).data("uuid"));$(this).prev().remove(),$(this).remove(),i.owners.splice(i.owners.indexOf(t),1),s.emit("updateShape",{shape:i.asDict(),redraw:!1})})}function c(t){const e=$(`<input type="text" placeholder="name" data-uuid="${t.uuid}" value="${t.name}" style="grid-column-start: name">`),a=$(`<input type="text" title="Current value" data-uuid="${t.uuid}" value="${t.value}">`),n=$(`<input type="text" title="Dim value" data-uuid="${t.uuid}" value="${t.dim||""}">`),o=$(`<input type="text" title="Aura colour" data-uuid="${t.uuid}">`),r=$(`<div data-uuid="${t.uuid}"><i class="fas fa-eye"></i></div>`),l=$(`<div data-uuid="${t.uuid}"><i class="fas fa-lightbulb"></i></div>`),u=$(`<div data-uuid="${t.uuid}"><i class="fas fa-trash-alt"></i></div>`);$("#shapeselectiondialog").children().last().append(e.add(a).add(`<span data-uuid="${t.uuid}">/</span>`).add(n).add($(`<div data-uuid="${t.uuid}">`).append(o).append($("</div>"))).add(r).add(l).add(u)),t.visible||r.css("opacity",.3),t.lightSource||l.css("opacity",.3),o.spectrum({showInput:!0,showAlpha:!0,color:t.colour,move:function(t){i.auras.find(t=>t.uuid===$(this).data("uuid")).colour=t.toRgbString(),S.layerManager.getLayer(i.layer).invalidate(!0)},change:function(){s.emit("updateShape",{shape:i.asDict(),redraw:!0})}}),e.on("change",function(){const t=i.auras.find(t=>t.uuid===$(this).data("uuid"));t.name=$(this).val(),$(`#selection-aura-${t.uuid}-name`).text($(this).val()),s.emit("updateShape",{shape:i.asDict(),redraw:!0}),i.auras.length&&""===i.auras[i.auras.length-1].name&&""===i.auras[i.auras.length-1].value||(i.auras.push({uuid:B(),name:"",value:"",dim:"",lightSource:!1,colour:"rgba(0,0,0,0)",visible:!1}),c(i.auras[i.auras.length-1]))}),a.on("change",function(){const t=i.auras.find(t=>t.uuid===$(this).data("uuid"));t.value=$(this).val();const e=t.dim?`${t.value}/${t.dim}`:t.value;$(`#selection-aura-${t.uuid}-value`).text(e),s.emit("updateShape",{shape:i.asDict(),redraw:!0}),S.layerManager.getLayer(t.layer).invalidate()}),n.on("change",function(){const t=i.auras.find(t=>t.uuid===$(this).data("uuid"));t.dim=$(this).val();const e=t.dim?`${t.value}/${t.dim}`:t.value;$(`#selection-aura-${t.uuid}-value`).text(e),s.emit("updateShape",{shape:i.asDict(),redraw:!0}),S.layerManager.getLayer(t.layer).invalidate()}),u.on("click",function(){const t=i.auras.find(t=>t.uuid===$(this).data("uuid"));""===t.name&&""===t.value||($(`[data-uuid=${t.uuid}]`).remove(),i.auras.splice(i.auras.indexOf(t),1),i.checkLightSources(),s.emit("updateShape",{shape:i.asDict(),redraw:!0}),S.layerManager.getLayer(t.layer).invalidate())}),r.on("click",function(){const t=i.auras.find(t=>t.uuid===$(this).data("uuid"));t.visible=!t.visible,t.visible?$(this).css("opacity",1):$(this).css("opacity",.3),s.emit("updateShape",{shape:i.asDict(),redraw:!0})}),l.on("click",function(){const t=i.auras.find(t=>t.uuid===$(this).data("uuid"));t.lightSource=!t.lightSource;const e=S.lightsources,a=e.findIndex(e=>e.aura===t.uuid);t.lightSource?($(this).css("opacity",1),-1===a&&e.push({shape:i.uuid,aura:t.uuid})):($(this).css("opacity",.3),a>=0&&e.splice(a,1));const n=S.layerManager.getLayer("fow");void 0!==n&&n.invalidate(),s.emit("updateShape",{shape:i.asDict(),redraw:!0})})}n.nextUntil(o).remove(),o.nextUntil(r).remove(),r.nextUntil($("#shapeselectiondialog").find("form")).remove(),i.owners.forEach(l),i.owners.length&&""===i.owners[i.owners.length-1].name&&""===i.owners[i.owners.length-1].value||l(""),i.trackers.forEach(function t(e){const a=$(`<input type="text" placeholder="name" data-uuid="${e.uuid}" value="${e.name}" style="grid-column-start: name">`),n=$(`<input type="text" title="Current value" data-uuid="${e.uuid}" value="${e.value}">`),o=$(`<input type="text" title="Max value" data-uuid="${e.uuid}" value="${e.maxvalue||""}">`),l=$(`<div data-uuid="${e.uuid}"><i class="fas fa-eye"></i></div>`),c=$(`<div data-uuid="${e.uuid}"><i class="fas fa-trash-alt"></i></div>`);r.before(a.add(n).add(`<span data-uuid="${e.uuid}">/</span>`).add(o).add(`<span data-uuid="${e.uuid}"></span>`).add(l).add(`<span data-uuid="${e.uuid}"></span>`).add(c)),e.visible||l.css("opacity",.3),a.on("change",function(){const e=i.trackers.find(t=>t.uuid===$(this).data("uuid"));e.name=$(this).val(),$(`#selection-tracker-${e.uuid}-name`).text($(this).val()),s.emit("updateShape",{shape:i.asDict(),redraw:!1}),i.trackers.length&&""===i.trackers[i.trackers.length-1].name&&""===i.trackers[i.trackers.length-1].value||(i.trackers.push({uuid:B(),name:"",value:"",maxvalue:"",visible:!1}),t(i.trackers[i.trackers.length-1]))}),n.on("change",function(){const t=i.trackers.find(t=>t.uuid===$(this).data("uuid"));t.value=$(this).val();const e=t.maxvalue?`${t.value}/${t.maxvalue}`:t.value;$(`#selection-tracker-${t.uuid}-value`).text(e),s.emit("updateShape",{shape:i.asDict(),redraw:!1})}),o.on("change",function(){const t=i.trackers.find(t=>t.uuid===$(this).data("uuid"));t.maxvalue=$(this).val();const e=t.maxvalue?`${t.value}/${t.maxvalue}`:t.value;$(`#selection-tracker-${t.uuid}-value`).text(e),s.emit("updateShape",{shape:i.asDict(),redraw:!1})}),c.on("click",function(){const t=i.trackers.find(t=>t.uuid===$(this).data("uuid"));""!==t.name&&""!==t.value&&($(`[data-uuid=${t.uuid}]`).remove(),i.trackers.splice(i.trackers.indexOf(t),1),s.emit("updateShape",{shape:i.asDict(),redraw:!1}))}),l.on("click",function(){const t=i.trackers.find(t=>t.uuid===$(this).data("uuid"));t.visible?$(this).css("opacity",.3):$(this).css("opacity",1),t.visible=!t.visible,s.emit("updateShape",{shape:i.asDict(),redraw:!0})})});for(let t=0;t<i.auras.length;t++)c(i.auras[t]);D.dialog("open")}),$(".selection-tracker-value").on("click",function(){const t=$(this).data("uuid"),e=i.trackers.find(e=>e.uuid===t),a=prompt(`New  ${e.name} value: (absolute or relative)`);"+"===a[0]?e.value+=parseInt(a.slice(1)):"-"===a[0]?e.value-=parseInt(a.slice(1)):e.value=parseInt(a);const n=e.maxvalue?`${e.value}/${e.maxvalue}`:e.value;$(this).text(n),s.emit("updateShape",{shape:i.asDict(),redraw:!1})}),$(".selection-aura-value").on("click",function(){const t=$(this).data("uuid"),e=i.auras.find(e=>e.uuid===t),a=prompt(`New  ${e.name} value: (absolute or relative)`);"+"===a[0]?e.value+=parseInt(a.slice(1)):"-"===a[0]?e.value-=parseInt(a.slice(1)):e.value=parseInt(a);const n=e.dim?`${e.value}/${e.dim}`:e.value;$(this).text(n),s.emit("updateShape",{shape:i.asDict(),redraw:!0}),S.layerManager.getLayer(i.layer).invalidate()})},r.prototype.onSelectionLoss=function(){$("#selection-menu").hide()},r.prototype.onRemove=function(){},r.prototype.asDict=function(){return Object.assign({},this)},r.prototype.draw=function(t){"fow"===this.layer&&(this.fill=I.spectrum("get").toRgbString()),void 0!==this.globalCompositeOperation?t.globalCompositeOperation=this.globalCompositeOperation:t.globalCompositeOperation="source-over",this.drawAuras(t)},r.prototype.drawAuras=function(t){const e=this;this.auras.forEach(function(i){t.beginPath(),t.fillStyle=S.layerManager.getLayer("fow").ctx===t?"black":i.colour;const a=W(e.center());if(t.arc(a.x,a.y,_(i.value),0,2*Math.PI),t.fill(),i.dim){const a=tinycolor(i.colour);t.beginPath(),t.fillStyle=a.setAlpha(a.getAlpha()/2).toRgbString();const n=W(e.center());t.arc(n.x,n.y,_(i.dim),0,2*Math.PI),t.fill()}})},r.prototype.contains=function(){return!1},r.prototype.showContextMenu=function(t){const e=S.layerManager.getLayer();e.selection=[this],this.onSelection(),e.invalidate(!0);const i=this;L.show(),L.empty(),L.css({left:t.x,top:t.y});let a="<ul><li>Layer<ul>";S.layerManager.layers.forEach(function(t){if(!t.selectable)return;const i=t.name===e.name?" style='background-color:aqua' ":" ";a+=`<li data-action='setLayer' data-layer='${t.name}' ${i} class='context-clickable'>${t.name}</li>`}),a+="</ul></li><li data-action='moveToBack' class='context-clickable'>Move to back</li><li data-action='moveToFront' class='context-clickable'>Move to front</li><li data-action='addInitiative' class='context-clickable'>Add initiative</li></ul>",L.html(a),$(".context-clickable").on("click",function(){!function(t,e){const i=t.data("action"),a=S.layerManager.getLayer();switch(i){case"moveToFront":a.moveShapeOrder(e,a.shapes.data.length-1,!0);break;case"moveToBack":a.moveShapeOrder(e,0,!0);break;case"setLayer":a.removeShape(e,!0),S.layerManager.getLayer(t.data("layer")).addShape(e,!0);break;case"addInitiative":S.initiativeTracker.addInitiative({uuid:e.uuid,visible:!S.IS_DM,group:!1,src:e.src,owners:e.owners},!0)}L.hide()}($(this),i)})},l.prototype.contains=function(t,e,i){return void 0!==i&&!0!==i||(t=j(t),e=N(e)),this.x<=t&&this.x+this.w>=t&&this.y<=e&&this.y+this.h>=e},l.prototype.intersectsWith=function(t){return!(t.x>=this.x+this.w||t.x+t.w<=this.x||t.y>=this.y+this.h||t.y+t.h<=this.y)},l.prototype.getIntersectWithLine=function(t){const e=[q({x:this.x,y:this.y},{x:this.x+this.w,y:this.y},t.start,t.end),q({x:this.x+this.w,y:this.y},{x:this.x+this.w,y:this.y+this.h},t.start,t.end),q({x:this.x,y:this.y},{x:this.x,y:this.y+this.h},t.start,t.end),q({x:this.x,y:this.y+this.h},{x:this.x+this.w,y:this.y+this.h},t.start,t.end)];let i=1/0,a=null;for(let n=0;n<e.length;n++){if(null===e[n])continue;const o=K(t.start,e[n]);i>o&&(i=o,a=e[n])}return{intersect:a,distance:i}},c.prototype=Object.create(r.prototype),c.prototype.getBoundingBox=function(){return new l(this.x,this.y,this.w,this.h)},c.prototype.draw=function(t){r.prototype.draw.call(this,t),t.fillStyle=this.fill;const e=S.layerManager.zoomFactor,i=W({x:this.x,y:this.y});t.fillRect(i.x,i.y,this.w*e,this.h*e),"rgba(0, 0, 0, 0)"!==this.border&&(t.strokeStyle=this.border,t.strokeRect(i.x,i.y,this.w*e,this.h*e))},c.prototype.contains=function(t,e,i){return void 0!==i&&!0!==i||(t=j(t),e=N(e)),this.x<=t&&this.x+this.w>=t&&this.y<=e&&this.y+this.h>=e},c.prototype.inCorner=function(t,e,i){switch(i){case"ne":return E(this.x+this.w-3)<=t&&t<=E(this.x+this.w+3)&&G(this.y-3)<=e&&e<=G(this.y+3);case"nw":return E(this.x-3)<=t&&t<=E(this.x+3)&&G(this.y-3)<=e&&e<=G(this.y+3);case"sw":return E(this.x-3)<=t&&t<=E(this.x+3)&&G(this.y+this.h-3)<=e&&e<=G(this.y+this.h+3);case"se":return E(this.x+this.w-3)<=t&&t<=E(this.x+this.w+3)&&G(this.y+this.h-3)<=e&&e<=G(this.y+this.h+3);default:return!1}},c.prototype.getCorner=function(t,e){return this.inCorner(t,e,"ne")?"ne":this.inCorner(t,e,"nw")?"nw":this.inCorner(t,e,"se")?"se":this.inCorner(t,e,"sw")?"sw":void 0},c.prototype.center=function(t){if(void 0===t)return{x:this.x+this.w/2,y:this.y+this.h/2};this.x=t.x-this.w/2,this.y=t.y-this.h/2},u.prototype=Object.create(r.prototype),u.prototype.getBoundingBox=function(){return new l(this.x-this.r,this.y-this.r,2*this.r,2*this.r)},u.prototype.draw=function(t){r.prototype.draw.call(this,t),t.beginPath(),t.fillStyle=this.fill;const e=W({x:this.x,y:this.y});t.arc(e.x,e.y,this.r,0,2*Math.PI),t.fill(),"rgba(0, 0, 0, 0)"!==this.border&&(t.beginPath(),t.strokeStyle=this.border,t.arc(e.x,e.y,this.r,0,2*Math.PI),t.stroke())},u.prototype.contains=function(t,e){return(t-E(this.x))**2+(e-G(this.y))**2<this.r**2},u.prototype.inCorner=function(t,e,i){switch(i){case"ne":return E(this.x+this.w-3)<=t&&t<=E(this.x+this.w+3)&&G(this.y-3)<=e&&e<=G(this.y+3);case"nw":return E(this.x-3)<=t&&t<=E(this.x+3)&&G(this.y-3)<=e&&e<=G(this.y+3);case"sw":return E(this.x-3)<=t&&t<=E(this.x+3)&&G(this.y+this.h-3)<=e&&e<=G(this.y+this.h+3);case"se":return E(this.x+this.w-3)<=t&&t<=E(this.x+this.w+3)&&G(this.y+this.h-3)<=e&&e<=G(this.y+this.h+3);default:return!1}},u.prototype.getCorner=function(t,e){return this.inCorner(t,e,"ne")?"ne":this.inCorner(t,e,"nw")?"nw":this.inCorner(t,e,"se")?"se":this.inCorner(t,e,"sw")?"sw":void 0},u.prototype.center=function(t){if(void 0===t)return{x:this.x,y:this.y};this.x=t.x,this.y=t.y},h.prototype=Object.create(r.prototype),h.prototype.getBoundingBox=function(){return new l(Math.min(this.x1,this.x2),Math.min(this.y1,this.y2),Math.abs(this.x1-this.x2),Math.abs(this.y1-this.y2))},h.prototype.draw=function(t){r.prototype.draw.call(this,t),t.beginPath(),t.moveTo(E(this.x1),G(this.y1)),t.lineTo(E(this.x2),G(this.y2)),t.strokeStyle="rgba(255,0,0, 0.5)",t.lineWidth=3,t.stroke()},d.prototype=Object.create(r.prototype),d.prototype.getBoundingBox=function(){return new l(this.x,this.y,5,5)},d.prototype.draw=function(t){r.prototype.draw.call(this,t),t.font=this.font,t.save(),t.translate(E(this.x),G(this.y)),t.rotate(this.angle),t.textAlign="center",t.fillText(this.text,0,-5),t.restore()},p.prototype=Object.create(c.prototype),p.prototype.draw=function(t){r.prototype.draw.call(this,t);const e=S.layerManager.zoomFactor;t.drawImage(this.img,E(this.x),G(this.y),this.w*e,this.h*e)},y.prototype.invalidate=function(t){if(this.valid=!1,!(t=t||!1)&&"fow"!==this.name){const t=S.layerManager.getLayer("fow");void 0!==t&&t.invalidate(!0)}},y.prototype.addShape=function(t,e,i){void 0===e&&(e=!1),void 0===i&&(i=!1),t.layer=this.name,this.shapes.push(t),t.checkLightSources(),t.setMovementBlock(t.movementObstruction),e&&s.emit("add shape",{shape:t.asDict(),temporary:i}),S.layerManager.UUIDMap.set(t.uuid,t),this.invalidate(!e)},y.prototype.setShapes=function(t){const e=[],i=this;t.forEach(function(t){const a=function(t,e){void 0===e&&(e=!1);if(!e&&S.layerManager.UUIDMap.has(t.uuid))return S.layerManager.UUIDMap.get(t.uuid);let i;"rect"===t.type&&(i=Object.assign(new c,t));"circle"===t.type&&(i=Object.assign(new u,t));"line"===t.type&&(i=Object.assign(new h,t));"text"===t.type&&(i=Object.assign(new d,t));if("asset"===t.type){const e=new Image(t.w,t.h);e.src=t.src,(i=Object.assign(new p,t)).img=e,e.onload=function(){S.layerManager.getLayer(t.layer).invalidate()}}return i}(t,i);a.layer=i.name,a.checkLightSources(),a.setMovementBlock(t.movementObstruction),S.layerManager.UUIDMap.set(t.uuid,a),e.push(a)}),this.selection=[],this.shapes.data=e,this.invalidate()},y.prototype.removeShape=function(t,e,i){void 0===e&&(e=!1),void 0===i&&(i=!1),t.onRemove(),this.shapes.remove(t),e&&s.emit("remove shape",{shape:t,temporary:i});const a=S.lightsources.findIndex(e=>e.shape===t.uuid),n=S.lightblockers.findIndex(e=>e===t.uuid),o=S.movementblockers.findIndex(e=>e===t.uuid);a>=0&&S.lightsources.splice(a,1),n>=0&&S.lightblockers.splice(n,1),o>=0&&S.movementblockers.splice(o,1),S.layerManager.UUIDMap.delete(t.uuid),this.selection===t&&(this.selection=null),this.invalidate(!e)},y.prototype.clear=function(){this.ctx.clearRect(0,0,this.width,this.height)},y.prototype.draw=function(t){if(board_initialised&&!this.valid){const e=this.ctx;(t=void 0===t||t)&&this.clear();const i=this;if(this.shapes.data.forEach(function(t){E(t.x)>i.width||G(t.y)>i.height||E(t.x+t.w)<0||G(t.y+t.h)<0||"fow"===i.name&&t.visionObstruction&&S.layerManager.getLayer().name!==i.name||t.draw(e)}),null!=this.selection){e.fillStyle=this.selectionColor,e.strokeStyle=this.selectionColor,e.lineWidth=this.selectionWidth;const t=S.layerManager.zoomFactor;this.selection.forEach(function(i){e.strokeRect(E(i.x),G(i.y),i.w*t,i.h*t),e.fillRect(E(i.x+i.w-3),G(i.y-3),6*t,6*t),e.fillRect(E(i.x-3),G(i.y-3),6*t,6*t),e.fillRect(E(i.x+i.w-3),G(i.y+i.h-3),6*t,6*t),e.fillRect(E(i.x-3),G(i.y+i.h-3),6*t,6*t)})}this.valid=!0}},y.prototype.getMouse=function(t){let e,i,a=this.canvas,n=0,o=0;if(void 0!==a.offsetParent)do{n+=a.offsetLeft,o+=a.offsetTop}while(a=a.offsetParent);return n+=this.stylePaddingLeft+this.styleBorderLeft+this.htmlLeft,o+=this.stylePaddingTop+this.styleBorderTop+this.htmlTop,{x:e=t.pageX-n,y:i=t.pageY-o}},y.prototype.moveShapeOrder=function(t,e,i){this.shapes.moveTo(t,e)&&(i&&s.emit("moveShapeOrder",{shape:t.asDict(),index:e}),this.invalidate(!0))},y.prototype.onShapeMove=function(){this.invalidate()},g.prototype=Object.create(y.prototype),g.prototype.invalidate=function(){S.layerManager.drawGrid()},f.prototype=Object.create(y.prototype),f.prototype.addShape=function(t,e,i){t.fill=I.spectrum("get").toRgbString(),y.prototype.addShape.call(this,t,e,i)},f.prototype.setShapes=function(t){const e=I.spectrum("get").toRgbString();t.forEach(function(t){t.fill=e}),y.prototype.setShapes.call(this,t)},f.prototype.onShapeMove=function(t){t.fill=I.spectrum("get").toRgbString(),y.prototype.onShapeMove.call(this,t)},f.prototype.draw=function(){if(board_initialised&&!this.valid){const t=this.ctx,e=t.globalCompositeOperation;if(S.layerManager.fullFOW){const t=this.ctx.globalAlpha;this.ctx.globalCompositeOperation="copy",S.IS_DM&&(this.ctx.globalAlpha=S.layerManager.fowOpacity),this.ctx.fillStyle=I.spectrum("get").toRgbString(),this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),this.ctx.globalAlpha=t,this.ctx.globalCompositeOperation=e}S.IS_DM||y.prototype.draw.call(this,!S.layerManager.fullFOW),t.globalCompositeOperation="destination-out",S.layerManager.getLayer("tokens").shapes.data.forEach(function(e){if(!e.ownedBy())return;const i=e.getBoundingBox(),a=W(e.center()),n=.8*H(i.w);t.beginPath(),t.arc(a.x,a.y,n,0,2*Math.PI);const o=t.createRadialGradient(a.x,a.y,n/2,a.x,a.y,n);o.addColorStop(0,"rgba(0, 0, 0, 1)"),o.addColorStop(1,"rgba(0, 0, 0, 0)"),t.fillStyle=o,t.fill()}),t.globalCompositeOperation="destination-out",S.lightsources.forEach(function(e){const i=S.layerManager.UUIDMap.get(e.shape),a=i.auras.find(t=>t.uuid===e.aura);if(void 0===a)return void console.log("Old lightsource still lingering in the gameManager list");const n=R(a.value),o=i.center(),s=W(o),r=new u(o.x,o.y,n).getBoundingBox(),l=[];S.lightblockers.forEach(function(t){if(t===i.uuid)return;const e=S.layerManager.UUIDMap.get(t).getBoundingBox();e.intersectsWith(r)&&l.push(e)}),t.beginPath();let c=0;for(let e=0;e<2*Math.PI;e+=1/180*Math.PI){let i={intersect:null,distance:1/0},r=null;if(l.forEach(function(t){const a=t.getIntersectWithLine({start:o,end:{x:o.x+n*Math.cos(e),y:o.y+n*Math.sin(e)}});null!==a.intersect&&a.distance<i.distance&&(i=a,r=t)}),null===i.intersect){-1===c&&(c=e,t.lineTo(E(o.x+n*Math.cos(e)),G(o.y+n*Math.sin(e))));continue}-1!==c&&(t.arc(s.x,s.y,_(a.value),c,e),c=-1);let u=r.w/4*Math.cos(e),h=r.h/4*Math.sin(e);t.lineTo(E(i.intersect.x+u),G(i.intersect.y+h))}-1!==c&&t.arc(s.x,s.y,_(a.value),c,2*Math.PI);const h=_(a.value),d=t.createRadialGradient(s.x,s.y,h/2,s.x,s.y,h);d.addColorStop(0,"rgba(0, 0, 0, 1)"),d.addColorStop(1,"rgba(0, 0, 0, 0)"),t.fillStyle=d,t.fill()}),S.IS_DM&&y.prototype.draw.call(this,!S.layerManager.fullFOW),t.globalCompositeOperation=e}},v.prototype.setOptions=function(t){"unitSize"in t&&S.layerManager.setUnitSize(t.unitSize),"useGrid"in t&&S.layerManager.setUseGrid(t.useGrid),"fullFOW"in t&&S.layerManager.setFullFOW(t.fullFOW),"fowOpacity"in t&&S.layerManager.setFOWOpacity(t.fowOpacity),"fowColour"in t&&I.spectrum("set",t.fowColour)},v.prototype.setWidth=function(t){this.width=t;for(let e=0;e<S.layerManager.layers.length;e++)S.layerManager.layers[e].canvas.width=t,S.layerManager.layers[e].width=t},v.prototype.setHeight=function(t){this.height=t;for(let e=0;e<this.layers.length;e++)this.layers[e].canvas.height=t,this.layers[e].height=t},v.prototype.addLayer=function(t){this.layers.push(t),null===this.selectedLayer&&t.selectable&&(this.selectedLayer=t.name)},v.prototype.getLayer=function(t){t=void 0===t?this.selectedLayer:t;for(let e=0;e<this.layers.length;e++)if(this.layers[e].name===t)return this.layers[e]},v.prototype.setLayer=function(t){let e=!1;const i=this;this.layers.forEach(function(a){a.selectable&&(a.ctx.globalAlpha=e?.3:1,t===a.name&&(i.selectedLayer=t,e=!0),a.selection=[],a.invalidate(!0))})},v.prototype.getGridLayer=function(){return this.getLayer("grid")},v.prototype.drawGrid=function(){const t=this.getGridLayer(),e=t.ctx,i=S.layerManager.zoomFactor,a=S.layerManager.panX,n=S.layerManager.panY;t.clear(),e.beginPath();for(let o=0;o<t.width;o+=this.gridSize*i)e.moveTo(o+a%this.gridSize*i,0),e.lineTo(o+a%this.gridSize*i,t.height),e.moveTo(0,o+n%this.gridSize*i),e.lineTo(t.width,o+n%this.gridSize*i);e.strokeStyle=O.spectrum("get").toRgbString(),e.lineWidth=1,e.stroke(),t.valid=!0;const o=S.layerManager.getLayer("fow");void 0!==o&&o.invalidate()},v.prototype.setGridSize=function(t){t!==this.gridSize&&(this.gridSize=t,this.drawGrid(),$("#gridSizeInput").val(t))},v.prototype.setUnitSize=function(t){t!==this.unitSize&&(this.unitSize=t,this.drawGrid(),$("#unitSizeInput").val(t))},v.prototype.setUseGrid=function(t){t!==this.useGrid&&(this.useGrid=t,t?$("#grid-layer").show():$("#grid-layer").hide(),$("#useGridInput").prop("checked",t))},v.prototype.setFullFOW=function(t){if(t!==this.fullFOW){this.fullFOW=t;const e=S.layerManager.getLayer("fow");void 0!==e&&e.invalidate(),$("#useFOWInput").prop("checked",t)}},v.prototype.setFOWOpacity=function(t){this.fowOpacity=t;const e=S.layerManager.getLayer("fow");void 0!==e&&e.invalidate(),$("#fowOpacity").val(t)},v.prototype.invalidate=function(){for(let t=this.layers.length-1;t>=0;t--)this.layers[t].invalidate(!0)},v.prototype.onMouseDown=function(t){const e=S.layerManager.getLayer(),i=e.getMouse(t),a=i.x,n=i.y;if("select"===k[S.selectedTool].name){let i,o=!1;for(let t=(i=e.selection.length?e.shapes.data.concat(e.selection):e.shapes.data).length-1;t>=0;t--){const s=i[t],r=s.getCorner(a,n);if(void 0!==r){if(!s.ownedBy())continue;e.selection=[s],s.onSelection(),e.resizing=!0,e.resizedir=r,e.invalidate(!0),o=!0,P(s);break}if(s.contains(a,n)){if(!s.ownedBy())continue;const t=s,i=S.layerManager.zoomFactor;-1===e.selection.indexOf(t)&&(e.selection=[t],t.onSelection()),e.dragging=!0,e.dragoffx=a-t.x*i,e.dragoffy=n-t.y*i,e.dragorig=Object.assign({},t),P(s),e.invalidate(!0),o=!0;break}}o||(e.selection.forEach(function(t){t.onSelectionLoss()}),e.selection=[],e.selecting=!0,e.selectionStartPoint=A(e.getMouse(t)),e.selectionHelper=new c(e.selectionStartPoint.x,e.selectionStartPoint.y,0,0,"rgba(0,0,0,0)","black"),e.selectionHelper.owners.push(S.username),e.addShape(e.selectionHelper,!1,!1),e.invalidate(!0))}else"pan"===k[S.selectedTool].name&&(e.panning=!0,e.dragoffx=a,e.dragoffy=n)},v.prototype.onMouseMove=function(t){const e=S.layerManager.getLayer(),i=e.getMouse(t),a=S.layerManager.zoomFactor;if(e.selecting){if(null===this.selectionStartPoint)return;const i=A(e.getMouse(t));e.selectionHelper.w=Math.abs(i.x-e.selectionStartPoint.x),e.selectionHelper.h=Math.abs(i.y-e.selectionStartPoint.y),e.selectionHelper.x=Math.min(e.selectionStartPoint.x,i.x),e.selectionHelper.y=Math.min(e.selectionStartPoint.y,i.y),e.invalidate(!0)}else if(e.panning)S.layerManager.panX+=Math.round((i.x-e.dragoffx)/a),S.layerManager.panY+=Math.round((i.y-e.dragoffy)/a),e.dragoffx=i.x,e.dragoffy=i.y,S.layerManager.invalidate();else if(e.selection.length){const t=e.selection[e.selection.length-1].x*a,n=e.selection[e.selection.length-1].y*a;e.selection.forEach(function(o){const r=i.x-(t+e.dragoffx),l=i.y-(n+e.dragoffy);if(e.dragging){if(o.x+=r/a,o.y+=l/a,"fow"!==e.name){let e=!1;const i=o.getBoundingBox();if(S.movementblockers.filter(t=>t!==o.uuid&&S.layerManager.UUIDMap.get(t).getBoundingBox().intersectsWith(i)).length>0)e=!0;else{const i={start:{x:t/a,y:n/a},end:{x:o.x,y:o.y}};e=S.movementblockers.some(t=>{const e=S.layerManager.UUIDMap.get(t).getBoundingBox().getIntersectWithLine(i);return t!==o.uuid&&null!==e.intersect&&e.distance>0})}if(e)return o.x-=r/a,void(o.y-=l/a)}o!==e.selectionHelper&&(s.emit("shapeMove",{shape:o.asDict(),temporary:!0}),P(o)),e.invalidate()}else e.resizing?("nw"===e.resizedir?(o.w=E(o.x)+o.w*a-i.x,o.h=G(o.y)+o.h*a-i.y,o.x=j(i.x),o.y=N(i.y)):"ne"===e.resizedir?(o.w=i.x-E(o.x),o.h=G(o.y)+o.h*a-i.y,o.y=N(i.y)):"se"===e.resizedir?(o.w=i.x-E(o.x),o.h=i.y-G(o.y)):"sw"===e.resizedir&&(o.w=E(o.x)+o.w*a-i.x,o.h=i.y-G(o.y),o.x=j(i.x)),o.w/=a,o.h/=a,o!==e.selectionHelper&&(s.emit("shapeMove",{shape:o.asDict(),temporary:!0}),P(o)),e.invalidate()):o&&(o.inCorner(i.x,i.y,"nw")?document.body.style.cursor="nw-resize":o.inCorner(i.x,i.y,"ne")?document.body.style.cursor="ne-resize":o.inCorner(i.x,i.y,"se")?document.body.style.cursor="se-resize":o.inCorner(i.x,i.y,"sw")?document.body.style.cursor="sw-resize":document.body.style.cursor="default")})}else document.body.style.cursor="default"},v.prototype.onMouseUp=function(t){const e=S.layerManager.getLayer();if(e.selecting){if(null===e.selectionStartPoint)return;e.shapes.data.forEach(function(t){if(t===e.selectionHelper)return;const i=t.getBoundingBox();t.ownedBy()&&e.selectionHelper.x<=i.x+i.w&&e.selectionHelper.x+e.selectionHelper.w>=i.x&&e.selectionHelper.y<=i.y+i.h&&e.selectionHelper.y+e.selectionHelper.h>=i.y&&e.selection.push(t)}),e.selection.length>0&&e.selection.push(e.selectionHelper),e.removeShape(e.selectionHelper,!1,!1),e.selectionStartPoint=null,e.invalidate(!0)}else e.panning?s.emit("set clientOptions",{panX:S.layerManager.panX,panY:S.layerManager.panY}):e.selection.length&&e.selection.forEach(function(i){if(e.dragging){if(S.layerManager.useGrid&&!t.altKey){const t=S.layerManager.gridSize,e={x:i.x+i.w/2,y:i.y+i.h/2},a=e.x,n=e.y;i.w/t%2==0?i.x=Math.round(a/t)*t-i.w/2:i.x=(Math.round((a+t/2)/t)-.5)*t-i.w/2,i.h/t%2==0?i.y=Math.round(n/t)*t-i.h/2:i.y=(Math.round((n+t/2)/t)-.5)*t-i.h/2}i.onMouseUp(),e.dragorig.x===i.x&&e.dragorig.y===i.y||(i!==e.selectionHelper&&(s.emit("shapeMove",{shape:i.asDict(),temporary:!1}),P(i)),e.invalidate())}if(e.resizing){if(i.w<0&&(i.x+=i.w,i.w=Math.abs(i.w)),i.h<0&&(i.y+=i.h,i.h=Math.abs(i.h)),S.layerManager.useGrid&&!t.altKey){const t=S.layerManager.gridSize;i.x=Math.round(i.x/t)*t,i.y=Math.round(i.y/t)*t,i.w=Math.max(Math.round(i.w/t)*t,t),i.h=Math.max(Math.round(i.h/t)*t,t)}i!==e.selectionHelper&&(s.emit("shapeMove",{shape:i.asDict(),temporary:!1}),P(i)),e.invalidate()}});e.dragging=!1,e.resizing=!1,e.panning=!1,e.selecting=!1},v.prototype.onContextMenu=function(t){t.preventDefault(),t.stopPropagation();const e=S.layerManager.getLayer(),i=e.getMouse(t),a=i.x,n=i.y;e.shapes.data.forEach(function(t){t.contains(a,n)&&t.showContextMenu(i)})},m.prototype.onMouseDown=function(t){const e=S.layerManager.getLayer();this.startPoint=A(e.getMouse(t));const i=this.fillColor.spectrum("get"),a=null===i?tinycolor("transparent"):i,n=this.borderColor.spectrum("get"),o=null===n?tinycolor("transparent"):n;this.rect=new c(this.startPoint.x,this.startPoint.y,0,0,a.toRgbString(),o.toRgbString()),this.rect.owners.push(S.username),"fow"===e.name&&(this.rect.visionObstruction=!0,this.rect.movementObstruction=!0),S.lightblockers.push(this.rect.uuid),e.addShape(this.rect,!0,!1)},m.prototype.onMouseMove=function(t){if(null===this.startPoint)return;const e=S.layerManager.getLayer(),i=A(e.getMouse(t));this.rect.w=Math.abs(i.x-this.startPoint.x),this.rect.h=Math.abs(i.y-this.startPoint.y),this.rect.x=Math.min(this.startPoint.x,i.x),this.rect.y=Math.min(this.startPoint.y,i.y),s.emit("shapeMove",{shape:this.rect.asDict(),temporary:!1}),e.invalidate()},m.prototype.onMouseUp=function(){null!==this.startPoint&&(this.startPoint=null,this.rect=null)},x.prototype.onMouseDown=function(t){const e=S.layerManager.getLayer("draw");this.startPoint=A(e.getMouse(t)),this.ruler=new h(this.startPoint.x,this.startPoint.y,this.startPoint.x,this.startPoint.y),this.text=new d(this.startPoint.x,this.startPoint.y,"","20px serif"),this.ruler.owners.push(S.username),this.text.owners.push(S.username),e.addShape(this.ruler,!0,!0),e.addShape(this.text,!0,!0)},x.prototype.onMouseMove=function(t){if(null===this.startPoint)return;const e=S.layerManager.getLayer("draw"),i=A(e.getMouse(t));this.ruler.x2=i.x,this.ruler.y2=i.y,s.emit("shapeMove",{shape:this.ruler.asDict(),temporary:!0});const a=Math.sign(i.x-this.startPoint.x)*Math.sign(i.y-this.startPoint.y),n=Math.abs(i.x-this.startPoint.x),o=Math.abs(i.y-this.startPoint.y),r=Math.round(Math.sqrt(n**2+o**2)*S.layerManager.unitSize/S.layerManager.gridSize)+" ft";let l=Math.atan2(a*o,n);const c=Math.min(this.startPoint.x,i.x)+n/2,u=Math.min(this.startPoint.y,i.y)+o/2;this.text.x=c,this.text.y=u,this.text.text=r,this.text.angle=l,s.emit("shapeMove",{shape:this.text.asDict(),temporary:!0}),e.invalidate(!0)},x.prototype.onMouseUp=function(){if(null===this.startPoint)return;this.startPoint=null;const t=S.layerManager.getLayer("draw");t.removeShape(this.ruler,!0,!0),t.removeShape(this.text,!0,!0),this.ruler=null,this.text=null,t.invalidate(!0)},w.prototype.onMouseDown=function(t){const e=S.layerManager.getLayer("fow");this.startPoint=A(e.getMouse(t)),this.rect=new c(this.startPoint.x,this.startPoint.y,0,0,I.spectrum("get").toRgbString()),e.addShape(this.rect,!0,!1),$("#fow-reveal").prop("checked")?this.rect.globalCompositeOperation="destination-out":this.rect.globalCompositeOperation="source-over"},w.prototype.onMouseUp=function(){null!==this.startPoint&&(this.startPoint=null,this.rect=null)},w.prototype.onMouseMove=function(t){if(null===this.startPoint)return;const e=S.layerManager.getLayer("fow"),i=A(e.getMouse(t));this.rect.w=Math.abs(i.x-this.startPoint.x),this.rect.h=Math.abs(i.y-this.startPoint.y),this.rect.x=Math.min(this.startPoint.x,i.x),this.rect.y=Math.min(this.startPoint.y,i.y),s.emit("shapeMove",{shape:this.rect.asDict(),temporary:!1}),e.invalidate()},M.prototype.onMouseDown=function(t){const e=S.layerManager.getLayer();this.startPoint=A(e.getMouse(t)),this.rect=new c(this.startPoint.x,this.startPoint.y,0,0,"rgba(0,0,0,0)","black"),e.addShape(this.rect,!1,!1)},M.prototype.onMouseMove=function(t){if(null===this.startPoint)return;const e=S.layerManager.getLayer(),i=A(e.getMouse(t));this.rect.w=Math.abs(i.x-this.startPoint.x),this.rect.h=Math.abs(i.y-this.startPoint.y),this.rect.x=Math.min(this.startPoint.x,i.x),this.rect.y=Math.min(this.startPoint.y,i.y),e.invalidate()},M.prototype.onMouseUp=function(){if(null===this.startPoint)return;const t=S.layerManager.getLayer();if(1!==t.selection.length)return void t.removeShape(this.rect,!1,!1);const e=this.rect.w,i=this.rect.h;t.selection[0].w*=this.xCount.val()*S.layerManager.gridSize/e,t.selection[0].h*=this.yCount.val()*S.layerManager.gridSize/i,t.removeShape(this.rect,!1,!1),this.startPoint=null,this.rect=null},b.prototype.setClientOptions=function(t){"gridColour"in t&&O.spectrum("set",t.gridColour),"fowColour"in t&&(I.spectrum("set",t.fowColour),S.layerManager.invalidate()),"panX"in t&&(S.layerManager.panX=t.panX),"panY"in t&&(S.layerManager.panY=t.panY),"zoomFactor"in t&&(S.layerManager.zoomFactor=t.zoomFactor,$("#zoomer").slider({value:1/t.zoomFactor}),S.layerManager.getGridLayer().invalidate())},b.prototype.setupTools=function(){const t=$("#toolselect").find("ul");k.forEach(function(e){if(!e.playerTool&&!S.IS_DM)return;const i=e.defaultSelect?" class='tool-selected'":"",a=$("<li id='tool-"+e.name+"'"+i+"><a href='#'>"+e.name+"</a></li>");if(t.append(a),e.hasDetail){const t=e.func.detailDiv;$("#tooldetail").append(t),t.hide()}a.on("click",function(){const t=k.indexOf(e);if(t!==S.selectedTool){$(".tool-selected").removeClass("tool-selected"),$(this).addClass("tool-selected"),S.selectedTool=t;const i=$("#tooldetail");e.hasDetail?($("#tooldetail").children().hide(),e.func.detailDiv.show(),i.show()):i.hide()}})})};let S=new b;const k=[{name:"select",playerTool:!0,defaultSelect:!0,hasDetail:!1,func:S.layerManager},{name:"pan",playerTool:!0,defaultSelect:!1,hasDetail:!1,func:S.layerManager},{name:"draw",playerTool:!0,defaultSelect:!1,hasDetail:!0,func:S.drawTool},{name:"ruler",playerTool:!0,defaultSelect:!1,hasDetail:!1,func:S.rulerTool},{name:"fow",playerTool:!1,defaultSelect:!1,hasDetail:!0,func:S.fowTool},{name:"map",playerTool:!1,defaultSelect:!1,hasDetail:!0,func:S.mapTool}],O=$("#gridColour");O.spectrum({showInput:!0,allowEmpty:!0,showAlpha:!0,color:"rgba(255,0,0, 0.5)",move:function(){S.layerManager.drawGrid()},change:function(t){s.emit("set clientOptions",{gridColour:t.toRgbString()})}});const I=$("#fowColour");I.spectrum({showInput:!0,color:"rgb(82, 81, 81)",move:function(t){const e=S.layerManager.getLayer("fow");void 0!==e&&(e.shapes.data.forEach(function(e){e.fill=t.toRgbString()}),e.invalidate())},change:function(t){s.emit("set clientOptions",{fowColour:t.toRgbString()})}}),window.addEventListener("selectstart",function(t){return t.preventDefault(),!1}),window.addEventListener("mousedown",function(t){board_initialised&&(0!==t.button&&1!==t.button||"CANVAS"!==t.target.tagName||(L.hide(),k[S.selectedTool].func.onMouseDown(t)))}),window.addEventListener("mousemove",function(t){board_initialised&&(0!==t.button&&1!==t.button||"CANVAS"!==t.target.tagName||k[S.selectedTool].func.onMouseMove(t))}),window.addEventListener("mouseup",function(t){board_initialised&&(0!==t.button&&1!==t.button||"CANVAS"!==t.target.tagName||k[S.selectedTool].func.onMouseUp(t))}),window.addEventListener("contextmenu",function(t){board_initialised&&2===t.button&&"CANVAS"===t.target.tagName&&k[S.selectedTool].func.onContextMenu(t)}),$("#zoomer").slider({orientation:"vertical",min:.5,max:5,step:.1,value:S.layerManager.zoomFactor,slide:function(t,e){const i=S.layerManager.zoomFactor,a=1/e.value,n=window.innerWidth/i,o=window.innerWidth/a,r=window.innerHeight/i,l=window.innerHeight/a;S.layerManager.zoomFactor=a,S.layerManager.panX-=(n-o)/2,S.layerManager.panY-=(r-l)/2,S.layerManager.invalidate(),s.emit("set clientOptions",{zoomFactor:a,panX:S.layerManager.panX,panY:S.layerManager.panY})}});const L=$("#contextMenu");L.hide();const C={x:$("#selectionInfoX"),y:$("#selectionInfoY"),w:$("#selectionInfoW"),h:$("#selectionInfoH")};function P(t){C.x.val(t.x),C.y.val(t.y),C.w.val(t.w),C.h.val(t.h)}const D=$("#shapeselectiondialog").dialog({autoOpen:!1,width:"auto"}),z=$("#initiativedialog").dialog({autoOpen:!1,width:"160px"});const T=$("#menu"),U=$("#locations-menu"),F=$("#layerselect");function B(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){const e=16*Math.random()|0;return("x"==t?e:3&e|8).toString(16)})}function W(t){const e=S.layerManager.zoomFactor,i=S.layerManager.panX,a=S.layerManager.panY;return{x:(t.x+i)*e,y:(t.y+a)*e}}function E(t){return W({x:t,y:0}).x}function G(t){return W({x:0,y:t}).y}function H(t){return t*S.layerManager.zoomFactor}function R(t){return t/S.layerManager.unitSize*S.layerManager.gridSize}function _(t){return H(R(t))}function A(t){const e=S.layerManager.zoomFactor,i=S.layerManager.panX,a=S.layerManager.panY;return{x:t.x/e-i,y:t.y/e-a}}function j(t){return A({x:t,y:0}).x}function N(t){return A({x:0,y:t}).y}function X(){this.data=[]}function Y(){this.data=[]}function V(t,e,i){return t.x>=Math.min(e.x,i.x)-1e-6&&t.x<=Math.max(e.x,i.x)+1e-6&&t.y>=Math.min(e.y,i.y)-1e-6&&t.y<=Math.max(e.y,i.y)+1e-6}function q(t,e,i,a){const n=e.y-t.y,o=t.x-e.x,s=a.y-i.y,r=i.x-a.x,l=n*r-s*o;if(0===l)return!1;const c=s*i.x+r*i.y,u=n*t.x+o*t.y,h=1/l,d={x:(r*u-o*c)*h,y:(n*c-s*u)*h};return function(t,e,i,a,n){return V(t,e,i)&&V(t,a,n)}(d,t,e,i,a)?d:null}function K(t,e){const i=t.x-e.x,a=t.y-e.y;return Math.sqrt(i*i+a*a)}$("#selection-menu").hide(),$("#rm-settings").on("click",function(){T.is(":visible")?($("#radialmenu").animate({left:"-=200px"}),T.animate({width:"toggle"}),U.animate({left:"-=200px",width:"+=200px"}),F.animate({left:"-=200px"})):(T.animate({width:"toggle"}),$("#radialmenu").animate({left:"+=200px"}),U.animate({left:"+=200px",width:"-=200px"}),F.animate({left:"+=200px"}))}),$("#rm-locations").on("click",function(){U.is(":visible")?($("#radialmenu").animate({top:"-=100px"}),U.animate({height:"toggle"})):(U.animate({height:"toggle"}),$("#radialmenu").animate({top:"+=100px"}))}),window.onresize=function(){S.layerManager.setWidth(window.innerWidth),S.layerManager.setHeight(window.innerHeight),S.layerManager.invalidate()},$("body").keyup(function(t){if(46===t.keyCode&&"INPUT"!==t.target.tagName){const t=S.layerManager.getLayer();t.selection.forEach(function(e){t.removeShape(e,!0,!1),S.initiativeTracker.removeInitiative(e.uuid,!0)})}}),$("#gridSizeInput").on("change",function(t){const e=parseInt(t.target.value);S.layerManager.setGridSize(e),s.emit("set gridsize",e)}),$("#unitSizeInput").on("change",function(t){const e=parseInt(t.target.value);S.layerManager.setUnitSize(e),s.emit("set locationOptions",{unitSize:e})}),$("#useGridInput").on("change",function(t){const e=t.target.checked;S.layerManager.setUseGrid(e),s.emit("set locationOptions",{useGrid:e})}),$("#useFOWInput").on("change",function(t){const e=t.target.checked;S.layerManager.setFullFOW(e),s.emit("set locationOptions",{fullFOW:e})}),$("#fowOpacity").on("change",function(t){let e=parseFloat(t.target.value);isNaN(e)?$("#fowOpacity").val(S.layerManager.fowOpacity):(e<0&&(e=0),e>1&&(e=1),S.layerManager.setFOWOpacity(e),s.emit("set locationOptions",{fowOpacity:e}))}),X.prototype=[],X.prototype.push=function(t){this.data.push(t)},X.prototype.remove=function(t){this.data.splice(this.data.indexOf(t),1)},X.prototype.indexOf=function(t){return this.data.indexOf(t)},X.prototype.moveTo=function(t,e){const i=this.indexOf(t);return i!==e&&(this.data.splice(i,1),this.data.splice(e,0,t),!0)},Y.prototype.addInitiative=function(t,e){0!==this.data.length&&z.dialog("isOpen")||z.dialog("open"),void 0===t.initiative&&(t.initiative=0);const i=this.data.find(e=>e.uuid===t.uuid);void 0!==i?(Object.assign(i,t),this.redraw()):(this.data.push(t),this.redraw()),e&&s.emit("updateInitiative",t)},Y.prototype.removeInitiative=function(t,e,i){i=i||!1;const a=this.data.findIndex(e=>e.uuid===t);if(a>=0){if(!i&&this.data[a].group)return;this.data.splice(a,1),this.redraw(),e&&s.emit("updateInitiative",{uuid:t})}0===this.data.length&&z.dialog("isOpen")&&z.dialog("close")},Y.prototype.redraw=function(){z.empty(),this.data.sort(function(t,e){return e.initiative-t.initiative});const t=this;this.data.forEach(function(e){void 0===e.owners&&(e.owners=[]);const i=void 0===e.src?"":$(`<img src="${e.src}" width="30px" data-uuid="${e.uuid}">`),a=$(`<input type="text" placeholder="value" data-uuid="${e.uuid}" value="${e.initiative}" style="grid-column-start: value">`),n=$(`<div data-uuid="${e.uuid}"><i class="fas fa-eye"></i></div>`),o=$(`<div data-uuid="${e.uuid}"><i class="fas fa-users"></i></div>`),r=$(`<div style="grid-column-start: remove" data-uuid="${e.uuid}"><i class="fas fa-trash-alt"></i></div>`);n.css("opacity",e.visible?"1.0":"0.3"),o.css("opacity",e.group?"1.0":"0.3"),e.owners.includes(S.username)||S.IS_DM||(a.prop("disabled","disabled"),r.css("opacity","0.3")),z.append(i).append(a).append(n).append(o).append(r),a.on("change",function(){const e=t.data.find(t=>t.uuid===$(this).data("uuid"));e.initiative=parseInt($(this).val())||0,t.addInitiative(e,!0)}),n.on("click",function(){const e=t.data.find(t=>t.uuid===$(this).data("uuid"));(e.owners.includes(S.username)||S.IS_DM)&&(e.visible=!e.visible,e.visible?$(this).css("opacity",1):$(this).css("opacity",.3),s.emit("updateInitiative",e))}),o.on("click",function(){const e=t.data.find(t=>t.uuid===$(this).data("uuid"));(e.owners.includes(S.username)||S.IS_DM)&&(e.group=!e.group,e.group?$(this).css("opacity",1):$(this).css("opacity",.3),s.emit("updateInitiative",e))}),r.on("click",function(){const e=$(this).data("uuid");(t.data.find(t=>t.uuid===e).owners.includes(S.username)||S.IS_DM)&&($(`[data-uuid=${e}]`).remove(),t.removeInitiative(e,!0,!0))})})};var Q=e.default=S}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,