<!doctype html>
<html>
<head>
    <title>PlanarAlly - Asset Manager</title>
    <link rel="stylesheet" type="text/css" href="/static/css/assets.css">
    <script src='/static/extern/js/socket.io-2.0.4.js'></script>
    <script defer src='/static/extern/js/fontawesome_all.js'></script>
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script>
        const socket = io.connect(location.protocol + "//" + location.host + "/pa_assetmgmt");
        socket.on("connect", function () {
            console.log("Connected");
        });
        socket.on("disconnect", function () {
            console.log("Disconnected");
        });
        socket.on("redirect", function (destination) {
            console.log("redirecting");
            window.location.href = destination;
        });
        socket.on("uploadAssetResult", function (fileInfo) {
            folder = app.directory;
            if (!folder['__files']) folder['__files'] = [];
            folder['__files'].push(fileInfo);
            app.$forceUpdate();
        });

        // source: mdn
        function hex(buffer) {
            var hexCodes = [];
            var view = new DataView(buffer);
            for (var i = 0; i < view.byteLength; i += 4) {
                // Using getUint32 reduces the number of iterations needed (we process 4 bytes each time)
                var value = view.getUint32(i)
                // toString(16) will give the hex representation of the number without padding
                var stringValue = value.toString(16)
                // We use concatenation and slice for padding
                var padding = '00000000'
                var paddedValue = (padding + stringValue).slice(-padding.length)
                hexCodes.push(paddedValue);
            }

            // Join all the hex strings into one
            return hexCodes.join("");
        }

        let app;
        let assetInfo = {{ asset_info|safe }};

        window.onload = () => {
            app = new Vue({
                el: '#AssetManager',
                data: {
                    currentDirectory: [],
                },
                computed: {
                    directory: function () {
                        folder = assetInfo;
                        for (let key of this.currentDirectory) {
                            folder = folder[key];
                        }
                        if (this.currentDirectory.length)
                            folder['..'] = {};
                        return folder;
                    }
                },
                methods: {
                    changeDirectory: function (nextFolder) {
                        if (nextFolder === '..')
                            this.currentDirectory.pop();
                        else
                            this.currentDirectory.push(nextFolder);
                    },
                    createDirectory: function () {
                        const name = prompt("New folder name");
                        if (name !== null) {
                            socket.emit("createDirectory", {name: name, directory: this.currentDirectory});
                            folder = app.directory;
                            folder[name] = {};
                            this.$forceUpdate();
                        }
                    },
                    prepareUpload: function () {
                        document.getElementById("files").click();
                    },
                    upload: function () {
                        const fls = document.getElementById("files").files;
                        for(let i=0; i < fls.length; i++) {
                            const fr = new FileReader();
                            fr.readAsArrayBuffer(fls[i]);
                            fr.onload = (e) => {
                                socket.emit("uploadAsset", {
                                    name: fls[i].name,
                                    directory: this.currentDirectory,
                                    data: fr.result
                                });
                            }
                        }
                    }
                },
                delimiters: ['[[', ']]'],
            })
        }
        Vue.component('contextmenu', {
            data: function () {
                return {
                    inode: null,
                    isFolder: false,
                    visible: false,
                    left: 0,
                    top: 0
                }
            },
            template: `
                <div id='contextMenu' tabindex="-1" v-if="visible" ref='menu' v-bind:style="{left:left, top:top}" @blur="hide">
                    <ul>
                        <li @click='rename'>Rename</li>
                        <li @click='remove'>Remove</li>
                    </ul>
                </div>`,
            methods: {
                show: function (inode, isFolder, event) {
                    if (inode === "..") return;
                    this.visible = true;
                    this.left = `${event.pageX}px`;
                    this.top = `${event.pageY}px`;
                    this.isFolder = isFolder;
                    this.inode = inode;
                    this.$nextTick(function() {
                        this.$refs.menu.focus();
                    }.bind(this));
                },
                hide: function () {
                    this.visible = false;
                },
                rename: function () {
                    if (this.inode === null) return;
                    const name = prompt("New name");
                    if (name === null) return;

                    socket.emit("rename", {isFolder: this.isFolder, oldName: this.inode, newName: name, directory: app.currentDirectory});

                    const folder = app.directory;
                    if (this.isFolder) {
                        folder[name] = folder[this.inode];
                        delete folder[this.inode];
                    } else {
                        folder['__files'].find(f => f.name === this.inode).name = name;
                    }
                    app.$forceUpdate();
                    this.hide();
                    this.inode = null;
                },
                remove: function () {
                    if (this.inode === null) return;
                    if (!confirm("Are you sure you wish to remove this?")) return;
                    
                    socket.emit("remove", {isFolder: this.isFolder, name: this.inode, directory: app.currentDirectory});

                    const folder = app.directory;
                    if (this.isFolder) {
                        delete folder[this.inode];
                    } else {
                        folder['__files'].splice(folder['__files'].findIndex(f => f.name === this.inode), 1);
                    }
                    app.$forceUpdate();
                    this.hide();
                    this.inode = null;
                }
            }
        })
    </script>
</head>
<body>
<div id='AssetManager'>
    <div id='assets'>
        <template v-for="(value, key) in directory">
            <template v-if="key === '__files'">
                <div class='inode file' v-for="file in value" @contextmenu.prevent="$refs.cm.show(file.name, false, $event)">
                    <img :src="'/static/assets/' + file.hash" width=50>
                    <div class='title'>[[ file.name ]]</div>
                </div>
            </template>
            <template v-else>
                <div class='inode folder' @click="changeDirectory(key)" @contextmenu.prevent="$refs.cm.show(key, true, $event)">
                    <i class='fas fa-folder' style='font-size: 50px;'></i>
                    <div class='title'>[[ key ]]</div>
                </div>
            </template>
        </template>
    </div>
    <input id='files' type='file' multiple hidden @change="upload">
    <button @click="createDirectory">Create new folder</button>
    <button @click="prepareUpload">Upload files</button>
    <contextmenu ref='cm'></contextmenu>
</div>
</body>
</html>